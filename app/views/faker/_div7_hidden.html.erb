<div id="div7_hidden" style=" background-color:white; display:none;   border:solid; width:1350px; height: 600px;">
	<h3 style="background-color:#8C8C8C;">regexify(key)</h3>
	<h4>-faker/lib/faker.rb</h4>
	<hr/>
	<p>
		<pre>
def regexify(re)
	# Handle either a Regexp or a String that looks like a Regexp
    re = re.source if re.respond_to?(:source) # Handle either a Regexp or a String that looks like a Regexp
    re.
    gsub(/^\/?\^?/, '').gsub(/\$?\/?$/, '').                                                                      # Ditch the anchors
    gsub(/\{(\d+)\}/, '{\1,\1}').gsub(/\?/, '{0,1}').                                                             # All {2} become {2,2} and ? become {0,1}
    gsub(/(\[[^\]]+\])\{(\d+),(\d+)\}/) {|match| $1 * Array(Range.new($2.to_i, $3.to_i)).sample }.                # [12]{1,2} becomes [12] or [12][12]
    gsub(/(\([^\)]+\))\{(\d+),(\d+)\}/) {|match| $1 * Array(Range.new($2.to_i, $3.to_i)).sample }.                # (12|34){1,2} becomes (12|34) or (12|34)(12|34)
    gsub(/(\\?.)\{(\d+),(\d+)\}/) {|match| $1 * Array(Range.new($2.to_i, $3.to_i)).sample }.                      # A{1,2} becomes A or AA or \d{3} becomes \d\d\d
    gsub(/\((.*?)\)/) {|match| match.gsub(/[\(\)]/, '').split('|').sample }.                                      # (this|that) becomes 'this' or 'that'
    gsub(/\[([^\]]+)\]/) {|match| match.gsub(/(\w\-\w)/) {|range| Array(Range.new(*range.split('-'))).sample } }. # All A-Z inside of [] become C (or X, or whatever)
    gsub(/\[([^\]]+)\]/) {|match| $1.split('').sample }.                                                          # All [ABC] become B (or A or C)
    gsub('\d') {|match| Numbers.sample }.
    gsub('\w') {|match| Letters.sample }
end

		</pre>
As we can see in the code...<br/>
you know , everything is shown in the code ...<br/>
I have nothing to see about the REs above, just admire the author of it ,really .
	</p>
</div>